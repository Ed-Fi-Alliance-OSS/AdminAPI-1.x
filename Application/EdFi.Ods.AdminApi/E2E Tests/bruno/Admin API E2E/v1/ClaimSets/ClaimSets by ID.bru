meta {
  name: ClaimSets by ID
  type: http
  seq: 10
}

get {
  url: {{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{TOKEN}}
}

tests {
  // pm.test("Status code is OK", function () {
  //     pm.response.to.have.status(200);
  // });
  // 
  // const response = pm.response.json();
  // const result = pm.response.json().result;
  // 
  // pm.test("Response matches success format", function () {
  //     pm.expect(response.status).to.equal(200);
  //     pm.expect(response).to.have.property("title");
  //     pm.expect(response).to.have.property("result");
  // });
  // 
  // pm.test("Response result matches claimset", function () {
  //     const claimSetId = pm.collectionVariables.get("CreatedClaimSetId");
  //     
  //     pm.expect(result.id).to.equal(claimSetId);
  //     pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get("ClaimSetGUID")}`);
  //     pm.expect(result.isSystemReserved).to.equal(false);
  //     pm.expect(result.applicationsCount).to.equal(0);
  //     pm.expect(result.resourceClaims).to.not.be.empty;
  //     const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === "educationStandards")
  //     pm.expect(educationStandardsResourceClaim).to.be.an("object", "The educationStandards resource claim was not found.")
  //     const academicSubjectDescriptorResourceClaim = result.resourceClaims.find(r => r.name === "academicSubjectDescriptor")
  //     pm.expect(academicSubjectDescriptorResourceClaim).to.be.an("object", "The academicSubjectDescriptor resource claim was not found.")
  // });
  // 
}

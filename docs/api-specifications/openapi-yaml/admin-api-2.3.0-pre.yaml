openapi: 3.0.1
info:
  title: Admin API Documentation
  description: 'The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.'
  version: v2
paths:
  /v2/resourceClaims:
    get:
      tags:
        - ResourceClaims
      summary: Retrieves all resourceClaims.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: Resource Claim Id
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: Resource Claim Name
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/resourceClaimModel'
  '/v2/resourceClaims/{id}':
    get:
      tags:
        - ResourceClaims
      summary: Retrieves a specific resourceClaim based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceClaimModel'
  /v2/vendors:
    get:
      tags:
        - Vendors
      summary: Retrieves all vendors.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: Vendor/ company id
          schema:
            type: integer
            format: int32
        - name: company
          in: query
          description: Vendor/ company name
          schema:
            type: string
        - name: namespacePrefixes
          in: query
          description: Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required.
          schema:
            type: string
        - name: contactName
          in: query
          description: Vendor contact name
          schema:
            type: string
        - name: contactEmailAddress
          in: query
          description: Vendor contact email id
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vendorModel'
    post:
      tags:
        - Vendors
      summary: Creates vendor based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addVendorRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/vendors/{id}':
    get:
      tags:
        - Vendors
      summary: Retrieves a specific vendor based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vendorModel'
    put:
      tags:
        - Vendors
      summary: Updates vendor based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editVendorRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - Vendors
      summary: Deletes an existing vendor using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  /v2/profiles:
    get:
      tags:
        - Profiles
      summary: Retrieves all profiles.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: Profile id
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: Profile name
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/profileModel'
    post:
      tags:
        - Profiles
      summary: Creates profile based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addProfileRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/profiles/{id}':
    get:
      tags:
        - Profiles
      summary: Retrieves a specific profile based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profileDetailsModel'
    put:
      tags:
        - Profiles
      summary: Updates profile based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editProfileRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - Profiles
      summary: Deletes an existing profile using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  /v2/odsInstances:
    get:
      tags:
        - OdsInstances
      summary: Retrieves all odsInstances.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: List of ODS instance id
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: Ods Instance name
          schema:
            type: string
        - name: instanceType
          in: query
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/odsInstanceModel'
    post:
      tags:
        - OdsInstances
      summary: Creates odsInstance based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addOdsInstanceRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/odsInstances/{id}':
    get:
      tags:
        - OdsInstances
      summary: Retrieves a specific odsInstance based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odsInstanceDetailModel'
    put:
      tags:
        - OdsInstances
      summary: Updates odsInstance based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editOdsInstanceRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - OdsInstances
      summary: Deletes an existing odsInstance using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  /v2/odsInstanceDerivatives:
    get:
      tags:
        - OdsInstanceDerivatives
      summary: Retrieves all odsInstanceDerivatives.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/odsInstanceDerivativeModel'
    post:
      tags:
        - OdsInstanceDerivatives
      summary: Creates odsInstanceDerivative based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addOdsInstanceDerivativeRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/odsInstanceDerivatives/{id}':
    get:
      tags:
        - OdsInstanceDerivatives
      summary: Retrieves a specific odsInstanceDerivative based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odsInstanceDerivativeModel'
    put:
      tags:
        - OdsInstanceDerivatives
      summary: Updates odsInstanceDerivative based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editOdsInstanceDerivativeRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - OdsInstanceDerivatives
      summary: Deletes an existing odsInstanceDerivative using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  /v2/odsInstanceContexts:
    get:
      tags:
        - OdsInstanceContexts
      summary: Retrieves all odsInstanceContexts.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/odsInstanceContextModel'
    post:
      tags:
        - OdsInstanceContexts
      summary: Creates odsInstanceContext based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addOdsInstanceContextRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/odsInstanceContexts/{id}':
    get:
      tags:
        - OdsInstanceContexts
      summary: Retrieves a specific odsInstanceContext based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odsInstanceContextModel'
    put:
      tags:
        - OdsInstanceContexts
      summary: Updates odsInstanceContext based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editOdsInstanceContextRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - OdsInstanceContexts
      summary: Deletes an existing odsInstanceContext using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  '/v2/claimSets/{id}/export':
    get:
      tags:
        - ClaimSets
      summary: Exports a specific claimset by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/claimSetDetailsModel'
  /v2/claimSets:
    get:
      tags:
        - ClaimSets
      summary: Retrieves all claimSets.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: Claim set id
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: Claim set name
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/claimSetModel'
    post:
      tags:
        - ClaimSets
      summary: Creates claimSet based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/claimSets/{id}':
    get:
      tags:
        - ClaimSets
      summary: Retrieves a specific claimSet based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/claimSetDetailsModel'
    put:
      tags:
        - ClaimSets
      summary: Updates claimSet based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - ClaimSets
      summary: Deletes an existing claimSet using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  /v2/authorizationStrategies:
    get:
      tags:
        - AuthorizationStrategies
      summary: Retrieves all authorizationStrategies.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authorizationStrategyModel'
  /v2/applications:
    get:
      tags:
        - Applications
      summary: Retrieves all applications.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: Application id
          schema:
            type: integer
            format: int32
        - name: applicationName
          in: query
          description: Application name
          schema:
            type: string
        - name: claimsetName
          in: query
          description: Claim set name
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/applicationModel'
    post:
      tags:
        - Applications
      summary: Creates application based on the supplied values.
      description: 'The POST operation can be used to create or update resources. In database terms, this is often referred to as an "upsert" operation (insert + update). Clients should NOT include the resource "id" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addApplicationRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationResult'
  '/v2/applications/{id}':
    get:
      tags:
        - Applications
      summary: Retrieves a specific application based on the identifier.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationModel'
    put:
      tags:
        - Applications
      summary: Updates application based on the resource identifier.
      description: 'The PUT operation is used to update a resource by identifier. If the resource identifier ("id") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editApplicationRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - Applications
      summary: Deletes an existing application using the resource identifier.
      description: 'The DELETE operation is used to delete an existing resource by identifier. If the resource doesn''t exist, an error will result (the resource will not be found).'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: Resource was successfully deleted.
  '/v2/odsInstances/{id}/applications':
    get:
      tags:
        - OdsInstances
      summary: Retrieves applications assigned to a specific ODS instance based on the resource identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/applicationModel'
  '/v2/vendors/{id}/applications':
    get:
      tags:
        - Vendors
      summary: Retrieves applications assigned to a specific vendor based on the resource identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/applicationModel'
  /v2/actions:
    get:
      tags:
        - Actions
      summary: Retrieves all actions.
      description: This GET operation provides access to resources using the "Get" search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
      parameters:
        - name: offset
          in: query
          description: Indicates how many items should be skipped before returning results.
          schema:
            type: integer
            format: int32
            default: '0'
        - name: limit
          in: query
          description: Indicates the maximum number of items that should be returned in the results.
          schema:
            type: integer
            format: int32
            default: '25'
        - name: orderBy
          in: query
          description: Indicates the property name by which the results will be sorted.
          schema:
            type: string
            default: ''
        - name: direction
          in: query
          description: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
          schema:
            title: Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC).
            enum:
              - Ascending
              - Descending
            type: string
            default: Descending
        - name: id
          in: query
          description: Action id
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: Action name
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/actionModel'
  /:
    get:
      tags:
        - Information
      summary: Retrieve API informational metadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/informationResult'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/informationResult'
  /v2/claimSets/copy:
    post:
      tags:
        - ClaimSets
      summary: Copies the existing claimset and create a new one.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/copyClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  /v2/claimSets/import:
    post:
      tags:
        - ClaimSets
      summary: Imports a new claimset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/importClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  '/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy':
    post:
      tags:
        - ClaimSets
      summary: Overrides the default authorization strategies on provided resource claim for a specific action.
      description: "Override the default authorization strategies on provided resource claim for a specific action.\r\n\r\nex: actionName = read,  authorizationStrategies= [ \"Ownershipbased\" ]"
      parameters:
        - name: claimSetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: resourceClaimId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/overrideAuthStategyOnClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
  '/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies':
    post:
      tags:
        - ClaimSets
      summary: Resets to default authorization strategies on provided resource claim.
      parameters:
        - name: claimSetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: resourceClaimId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
  '/v2/claimSets/{claimSetId}/resourceClaimActions':
    post:
      tags:
        - ClaimSets
      summary: Adds ResourceClaimAction association to a claim set.
      description: "Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.\r\nresouceclaimId is required fields."
      parameters:
        - name: claimSetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addResourceClaimOnClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '201':
          description: Created
  /connect/register:
    post:
      tags:
        - Connect
      summary: Registers new client
      description: Registers new client
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                ClientId:
                  type: string
                  description: Client id
                ClientSecret:
                  type: string
                  description: Client secret
                DisplayName:
                  type: string
                  description: Client display name
            encoding:
              ClientId:
                style: form
              ClientSecret:
                style: form
              DisplayName:
                style: form
      responses:
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: Application registered successfully.
  /connect/token:
    post:
      tags:
        - Connect
      summary: Retrieves bearer token
      description: "\nTo authenticate Swagger requests, execute using \"Authorize\" above, not \"Try It Out\" here."
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: 'string '
                client_secret:
                  type: 'string '
                grant_type:
                  type: 'string '
                scope:
                  type: string
      responses:
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '200':
          description: Sign-in successful.
  '/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}':
    put:
      tags:
        - ClaimSets
      summary: Updates the ResourceClaimActions to a specific resource claim on a claimset.
      description: 'Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.'
      parameters:
        - name: claimSetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: resourceClaimId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editResourceClaimOnClaimSetRequest'
        required: true
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
    delete:
      tags:
        - ClaimSets
      summary: Deletes a resource claims association from a claimset
      parameters:
        - name: claimSetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: resourceClaimId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '200':
          description: OK
  '/v2/applications/{id}/reset-credential':
    put:
      tags:
        - Applications
      summary: Reset application credentials. Returns new key and secret.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized. The request requires authentication
        '403':
          description: 'Forbidden. The request is authenticated, but not authorized to access this resource'
        '409':
          description: 'Conflict. The request is authenticated, but it has a conflict with an existing element'
        '500':
          description: Internal server error. An unhandled error occurred on the server. See the response body for details.
        '404':
          description: Not found. A resource with given identifier could not be found.
        '400':
          description: Bad Request. The request was invalid and cannot be completed. See the response body for details.
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationResult'
components:
  schemas:
    actionModel:
      title: Action
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        uri:
          type: string
          nullable: true
      additionalProperties: false
    addApplicationRequest:
      title: AddApplicationRequest
      type: object
      properties:
        applicationName:
          type: string
          description: Application name
        vendorId:
          type: integer
          description: Vendor/ company id
          format: int32
        claimSetName:
          type: string
          description: Claim set name
        profileIds:
          type: array
          items:
            type: integer
            format: int32
          description: Profile id
          nullable: true
        educationOrganizationIds:
          type: array
          items:
            type: integer
            format: int64
          description: Education organization ids
        odsInstanceIds:
          type: array
          items:
            type: integer
            format: int32
          description: List of ODS instance id
      additionalProperties: false
    addClaimSetRequest:
      title: AddClaimSetRequest
      type: object
      properties:
        name:
          type: string
          description: Claim set name
      additionalProperties: false
    addOdsInstanceContextRequest:
      title: AddOdsInstanceContextRequest
      type: object
      properties:
        odsInstanceId:
          type: integer
          description: ODS instance context ODS instance id.
          format: int32
        contextKey:
          type: string
          description: context key.
        contextValue:
          type: string
          description: context value.
      additionalProperties: false
    addOdsInstanceDerivativeRequest:
      title: AddOdsInstanceDerivativeRequest
      type: object
      properties:
        odsInstanceId:
          type: integer
          description: ODS instance derivative ODS instance id.
          format: int32
        derivativeType:
          type: string
          description: derivative type.
        connectionString:
          type: string
          description: connection string.
      additionalProperties: false
    addOdsInstanceRequest:
      title: AddOdsInstanceRequest
      type: object
      properties:
        name:
          type: string
          description: Ods Instance name
        instanceType:
          type: string
          description: Ods Instance type
          nullable: true
        connectionString:
          type: string
          description: Ods Instance connection string
      additionalProperties: false
    addProfileRequest:
      title: AddProfileRequest
      type: object
      properties:
        name:
          type: string
          description: Profile name
        definition:
          type: string
          description: Profile definition
      additionalProperties: false
      example: "{\r\n  \"name\": \"Test-Profile\",\r\n  \"definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"Resource1\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"Collection1\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Property1\\\" /><Property name=\\\"Property2\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"Collection2\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Property1\\\" /><Property name=\\\"Property2\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}"
    addResourceClaimOnClaimSetRequest:
      title: AddResourceClaimActionsOnClaimSetRequest
      type: object
      properties:
        resourceClaimId:
          type: integer
          description: ResourceClaim id
          format: int32
        resourceClaimActions:
          type: array
          items:
            $ref: '#/components/schemas/resourceClaimAction'
      additionalProperties: false
    addVendorRequest:
      title: AddVendorRequest
      type: object
      properties:
        company:
          type: string
          description: Vendor/ company name
        namespacePrefixes:
          type: string
          description: Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required.
        contactName:
          type: string
          description: Vendor contact name
        contactEmailAddress:
          type: string
          description: Vendor contact email id
      additionalProperties: false
    adminApiError:
      title: AdminApiError
      type: object
      properties:
        title:
          type: string
          nullable: true
          readOnly: true
        errors:
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
      additionalProperties: false
      description: Wrapper schema for all error responses
    applicationModel:
      title: Application
      type: object
      properties:
        id:
          type: integer
          format: int32
        applicationName:
          type: string
          nullable: true
        claimSetName:
          type: string
          nullable: true
        educationOrganizationIds:
          type: array
          items:
            type: integer
            format: int64
          nullable: true
        vendorId:
          type: integer
          format: int32
          nullable: true
        profileIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        odsInstanceIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    applicationResult:
      title: ApplicationKeySecret
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
      additionalProperties: false
    authorizationStrategy:
      title: ResourceClaimAuthorizationStrategy
      type: object
      properties:
        authStrategyId:
          type: integer
          format: int32
        authStrategyName:
          type: string
          nullable: true
        isInheritedFromParent:
          type: boolean
      additionalProperties: false
    authorizationStrategyModel:
      title: AuthorizationStrategy
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
      additionalProperties: false
    claimSetDetailsModel:
      title: ClaimSetWithResources
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        _isSystemReserved:
          type: boolean
          readOnly: true
        _applications:
          type: array
          items:
            $ref: '#/components/schemas/simpleApplicationModel'
          nullable: true
          readOnly: true
        resourceClaims:
          type: array
          items:
            $ref: '#/components/schemas/claimSetResourceClaimModel'
          nullable: true
      additionalProperties: false
    claimSetModel:
      title: ClaimSet
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        _isSystemReserved:
          type: boolean
          readOnly: true
        _applications:
          type: array
          items:
            $ref: '#/components/schemas/simpleApplicationModel'
          nullable: true
          readOnly: true
      additionalProperties: false
    claimSetResourceClaimActionAuthStrategies:
      title: ClaimSetResourceClaimActionAuthorizationStrategies
      type: object
      properties:
        actionId:
          type: integer
          format: int32
          nullable: true
        actionName:
          type: string
          nullable: true
        authorizationStrategies:
          type: array
          items:
            $ref: '#/components/schemas/authorizationStrategy'
          nullable: true
      additionalProperties: false
    claimSetResourceClaimModel:
      title: ClaimSetResourceClaim
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
          nullable: true
        actions:
          type: array
          items:
            $ref: '#/components/schemas/resourceClaimAction'
          nullable: true
        _defaultAuthorizationStrategiesForCRUD:
          type: array
          items:
            $ref: '#/components/schemas/claimSetResourceClaimActionAuthStrategies'
          nullable: true
          readOnly: true
        authorizationStrategyOverridesForCRUD:
          type: array
          items:
            $ref: '#/components/schemas/claimSetResourceClaimActionAuthStrategies'
          nullable: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/claimSetResourceClaimModel'
          description: Children are collection of ResourceClaim
          nullable: true
      additionalProperties: false
    copyClaimSetRequest:
      title: CopyClaimSetRequest
      type: object
      properties:
        originalId:
          type: integer
          description: ClaimSet id to copy
          format: int32
        name:
          type: string
          description: New claimset name
      additionalProperties: false
    editApplicationRequest:
      title: EditApplicationRequest
      type: object
      properties:
        applicationName:
          type: string
          description: Application name
        vendorId:
          type: integer
          description: Vendor/ company id
          format: int32
        claimSetName:
          type: string
          description: Claim set name
        profileIds:
          type: array
          items:
            type: integer
            format: int32
          description: Profile id
          nullable: true
        educationOrganizationIds:
          type: array
          items:
            type: integer
            format: int64
          description: Education organization ids
        odsInstanceIds:
          type: array
          items:
            type: integer
            format: int32
          description: List of ODS instance id
      additionalProperties: false
    editClaimSetRequest:
      title: EditClaimSetRequest
      type: object
      properties:
        name:
          type: string
          description: Claim set name
      additionalProperties: false
    editOdsInstanceContextRequest:
      title: EditOdsInstanceContextRequest
      type: object
      properties:
        odsInstanceId:
          type: integer
          description: ODS instance context ODS instance id.
          format: int32
        contextKey:
          type: string
          description: context key.
        contextValue:
          type: string
          description: context value.
      additionalProperties: false
    editOdsInstanceDerivativeRequest:
      title: EditOdsInstanceDerivativeRequest
      type: object
      properties:
        odsInstanceId:
          type: integer
          description: ODS instance derivative ODS instance id.
          format: int32
        derivativeType:
          type: string
          description: derivative type.
        connectionString:
          type: string
          description: connection string.
      additionalProperties: false
    editOdsInstanceRequest:
      title: EditOdsInstanceRequest
      type: object
      properties:
        name:
          type: string
          description: Ods Instance name
        instanceType:
          type: string
          description: Ods Instance type
          nullable: true
        connectionString:
          type: string
          description: Ods Instance connection string
          nullable: true
      additionalProperties: false
    editProfileRequest:
      title: EditProfileRequest
      type: object
      properties:
        name:
          type: string
          description: Profile name
        definition:
          type: string
          description: Profile definition
      additionalProperties: false
      example: "{\r\n  \"name\": \"Test-Profile\",\r\n  \"definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"Resource1\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"Collection1\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Property1\\\" /><Property name=\\\"Property2\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"Collection2\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Property1\\\" /><Property name=\\\"Property2\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}"
    editResourceClaimOnClaimSetRequest:
      title: EditResourceClaimActionsOnClaimSetRequest
      type: object
      properties:
        resourceClaimActions:
          type: array
          items:
            $ref: '#/components/schemas/resourceClaimAction'
      additionalProperties: false
    editVendorRequest:
      title: EditVendorRequest
      type: object
      properties:
        company:
          type: string
          description: Vendor/ company name
        namespacePrefixes:
          type: string
          description: Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required.
        contactName:
          type: string
          description: Vendor contact name
        contactEmailAddress:
          type: string
          description: Vendor contact email id
      additionalProperties: false
    importClaimSetRequest:
      title: ImportClaimSetRequest
      type: object
      properties:
        name:
          type: string
          description: Claim set name
        resourceClaims:
          type: array
          items:
            $ref: '#/components/schemas/claimSetResourceClaimModel'
          description: Resource Claims
      additionalProperties: false
    informationResult:
      title: Information
      type: object
      properties:
        version:
          type: string
          description: Application version
        build:
          type: string
          description: Build / release version
      additionalProperties: false
    odsInstanceContextModel:
      title: OdsInstanceContext
      type: object
      properties:
        id:
          type: integer
          format: int32
        odsInstanceId:
          type: integer
          format: int32
        contextKey:
          type: string
          nullable: true
        contextValue:
          type: string
          nullable: true
      additionalProperties: false
    odsInstanceDerivativeModel:
      title: OdsInstanceDerivative
      type: object
      properties:
        id:
          type: integer
          format: int32
        odsInstanceId:
          type: integer
          format: int32
          nullable: true
        derivativeType:
          type: string
          nullable: true
      additionalProperties: false
    odsInstanceDetailModel:
      title: OdsInstanceDetail
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        instanceType:
          type: string
          nullable: true
        odsInstanceContexts:
          type: array
          items:
            $ref: '#/components/schemas/odsInstanceContextModel'
          nullable: true
        odsInstanceDerivatives:
          type: array
          items:
            $ref: '#/components/schemas/odsInstanceDerivativeModel'
          nullable: true
      additionalProperties: false
    odsInstanceModel:
      title: OdsInstance
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        instanceType:
          type: string
          nullable: true
      additionalProperties: false
    overrideAuthStategyOnClaimSetRequest:
      title: OverrideAuthStategyOnClaimSetRequest
      type: object
      properties:
        actionName:
          type: string
          nullable: true
        authorizationStrategies:
          type: array
          items:
            type: string
          description: AuthorizationStrategy Names
      additionalProperties: false
    profileDetailsModel:
      title: ProfileDetails
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        name:
          type: string
          nullable: true
        definition:
          type: string
          nullable: true
      additionalProperties: false
    profileModel:
      title: Profile
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    registerClientRequest:
      title: RegisterClientRequest
      type: object
      properties:
        clientId:
          type: string
          description: Client id
        clientSecret:
          type: string
          description: Client secret
        displayName:
          type: string
          description: Client display name
      additionalProperties: false
    resourceClaimAction:
      title: ResourceClaimAction
      type: object
      properties:
        name:
          type: string
          nullable: true
        enabled:
          type: boolean
      additionalProperties: false
    resourceClaimModel:
      title: ResourceClaimModel
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        parentId:
          type: integer
          format: int32
          nullable: true
        parentName:
          type: string
          nullable: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/resourceClaimModel'
          description: Children are collection of SimpleResourceClaimModel
          nullable: true
      additionalProperties: false
    simpleApplicationModel:
      title: Application
      type: object
      properties:
        applicationName:
          type: string
          nullable: true
      additionalProperties: false
    vendorModel:
      title: Vendor
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        company:
          type: string
          nullable: true
        namespacePrefixes:
          type: string
          nullable: true
        contactName:
          type: string
          nullable: true
        contactEmailAddress:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    oauth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://localhost/connect/token
          scopes:
            edfi_admin_api/full_access: Unrestricted access to all Admin API endpoints
security:
  - oauth:
      - api
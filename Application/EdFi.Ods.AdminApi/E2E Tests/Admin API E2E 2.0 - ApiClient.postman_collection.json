{
	"info": {
		"_postman_id": "e18db654-7eb1-43dc-892d-b1e5ad39101c",
		"name": "Admin API E2E 2.0 - ApiClient",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22794466"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "ApiClient",
					"item": [
						{
							"name": "ApiClients",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Application Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Application User\",\r",
											"      \"contactEmailAddress\": \"application@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"ApplicationVendorId\", id);\r",
											"    }\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"        method: 'GET',\r",
											"        header: header\r",
											"    },  \r",
											"    function (err, response) {\r",
											"        if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"        const json = response.json();\r",
											"        if(!json[0].id) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }\r",
											"        else {\r",
											"            pm.collectionVariables.set(\"ODSInstanceId\", json[0].id);\r",
											"        }\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${pm.variables.get(\"API_URL\")}/v2/applications`,\r",
											"            method: 'POST',\r",
											"            header: header,\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw:JSON.stringify({\r",
											"                    \"applicationName\": \"Test Application\",\r",
											"                    \"vendorId\": pm.collectionVariables.get(\"ApplicationVendorId\"),\r",
											"                    \"claimSetName\": \"Ed-Fi Sandbox\",\r",
											"                    \"profileIds\": [],\r",
											"                    \"educationOrganizationIds\": [ 255901 ],\r",
											"                    \"odsInstanceIds\": [ pm.collectionVariables.get(\"ODSInstanceId\") ],\r",
											"                    \"enabled\": true\r",
											"                }),\r",
											"            }\r",
											"        },\r",
											"        function (err, response) {\r",
											"        if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"        const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"        if(id)\r",
											"            {\r",
											"                pm.collectionVariables.set(\"CreatedApplicationId\", id);\r",
											"            }\r",
											"        });\r",
											"    }); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ApiClients: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ApiClients: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/apiclients/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients: Response result includes api client key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"    pm.expect(result).to.have.property(\"applicationId\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedApiClientId\", result.id);\r",
											"}\r",
											"\r",
											"const PostApiClientSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"secret\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"applicationId\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"secret\",\r",
											"    \"applicationId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"POST ApiClient: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PostApiClientSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Test ApiClient\",\r\n  \"isApproved\": true,\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"odsInstanceIds\": [\r\n    {{ODSInstanceId}}\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients"
							},
							"response": []
						},
						{
							"name": "ApiClients - Invalid No Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ApiClients Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"isApproved\": true,\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"odsInstanceIds\": [\r\n    {{ODSInstanceId}}\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients"
							},
							"response": []
						},
						{
							"name": "ApiClients - Invalid No Application Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ApiClients Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationId\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Other Test ApiClient\",\r\n  \"isApproved\": true,\r\n  \"applicationId\": 0,\r\n  \"odsInstanceIds\": [\r\n    {{ODSInstanceId}}\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients"
							},
							"response": []
						},
						{
							"name": "ApiClients - Invalid No Ods Instances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ApiClients Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"OdsInstanceIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"isApproved\": true,\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"odsInstanceIds\": [ ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients"
							},
							"response": []
						},
						{
							"name": "ApiClients By Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ApiClients: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"if (Array.isArray(results) && results.length >= 2) {\r",
											"    const id1 = results[0].id;\r",
											"    const id2 = results[1].id;\r",
											"\r",
											"    const csv = `${id1},${id2}`;\r",
											"    pm.collectionVariables.set(\"FirstTwoApiClientIdsCSV\", csv);\r",
											"}\r",
											"\r",
											"pm.test(\"GET ApiClients: Response result includes api clients\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApiClient = results.map(\r",
											"        function(apiclient) { return apiclient.id; }\r",
											"    ).indexOf(parseInt(pm.collectionVariables.get(\"CreatedApiClientId\"), 10));\r",
											"\r",
											"    const result = results[indexOfApiClient];\r",
											"    pm.expect(result.name).to.equal(\"Test ApiClient\");\r",
											"    pm.expect(result.isApproved).to.equal(true);\r",
											"    pm.expect(result.applicationId).to.equal(parseInt(pm.collectionVariables.get(\"CreatedApplicationId\"), 10));\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ApiClients: Response results do not include secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApiClientsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"key\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"isApproved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"useSandbox\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"applicationId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"sandboxType\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"keyStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"key\",\r",
											"        \"name\",\r",
											"        \"isApproved\",\r",
											"        \"useSandbox\",\r",
											"        \"applicationId\",\r",
											"        \"sandboxType\",\r",
											"        \"keyStatus\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"odsInstanceIds\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ApiClients: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApiClientsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/apiclients?applicationid={{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"apiclients"
									],
									"query": [
										{
											"key": "applicationid",
											"value": "{{CreatedApplicationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ApiClients by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ApiClientId: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ApiClientId: Response result matches api client\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Test ApiClient\");\r",
											"    pm.expect(result.isApproved).to.equal(true);\r",
											"    pm.expect(result.applicationId).to.equal(parseInt(pm.collectionVariables.get(\"CreatedApplicationId\"), 10));\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ApiClientId: Response result does not include key or secret\", function () {  \r",
											"    pm.expect(result).to.not.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"const GetApiClientSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"    \"id\": {\r",
											"        \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"name\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"isApproved\": {\r",
											"        \"type\": \"boolean\"\r",
											"    },\r",
											"    \"useSandbox\": {\r",
											"        \"type\": \"boolean\"\r",
											"    },\r",
											"    \"applicationId\": {\r",
											"        \"type\": \"integer\"\r",
											"    },\r",
											"    \"sandboxType\": {\r",
											"        \"type\": \"integer\"\r",
											"    },\r",
											"    \"keyStatus\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"educationOrganizationIds\": {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {}\r",
											"    },\r",
											"    \"odsInstanceIds\": {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {}\r",
											"    }\r",
											"    },\r",
											"    \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"name\",\r",
											"    \"isApproved\",\r",
											"    \"useSandbox\",\r",
											"    \"applicationId\",\r",
											"    \"sandboxType\",\r",
											"    \"keyStatus\",\r",
											"    \"educationOrganizationIds\",\r",
											"    \"odsInstanceIds\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ApiClientId: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApiClientSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						},
						{
							"name": "ApiClients",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/apiclients/${pm.collectionVariables.get(\"CreatedApiClientId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"\r",
											"function (err, response) {\r",
											"  if(err) \r",
											"  { \r",
											"    console.log(\"Error :\", err); \r",
											"  } \r",
											"  const updated = response.json();\r",
											"    pm.test(\"PUT ApiClient: Response result includes updated api client\", function () {\r",
											"        pm.expect(updated.name).to.equal(\"Updated Test ApiClient\");\r",
											"        pm.expect(updated.isApproved).to.equal(false);\r",
											"        pm.expect(updated.applicationId).to.equal(parseInt(pm.collectionVariables.get(\"CreatedApplicationId\"), 10));\r",
											"        pm.expect(updated.odsInstanceIds.length).to.equal(1);\r",
											"   });\r",
											"\r",
											"   pm.test(\"PUT ApiClient: Response result does not include application key and secret\", function () {\r",
											"    pm.expect(updated).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Updated Test ApiClient\",\r\n  \"isApproved\": false,\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"odsInstanceIds\": [\r\n    {{ODSInstanceId}}\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						},
						{
							"name": "ApiClients - Invalid No Ods Instances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ApiClients Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ApiClients Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"OdsInstanceIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Updated Test ApiClient\",\r\n  \"isApproved\": false,\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"odsInstanceIds\": [ ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						},
						{
							"name": "Reset Credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResetCredentials: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResetCredentials: Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"const PutResetCredentialsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"secret\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"secret\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"PUT Reset Credentials: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutResetCredentialsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}/reset-credential"
							},
							"response": []
						},
						{
							"name": "ApiClients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ApiClients: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE ApiClients: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE ApiClients: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"apiclient\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteApiClientsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE ApiClients: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteApiClientsSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						},
						{
							"name": "ApiClients by Id - Invalid Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ApiClients NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"apiclient\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						},
						{
							"name": "ApiClients - Invalid Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ApiClients NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"apiclient\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Updated Test ApiClient\",\r\n  \"isApproved\": false,\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"odsInstanceIds\": [\r\n    {{ODSInstanceId}}\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						},
						{
							"name": "Reset Credential - Invalid Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ApiClients NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"ApiClient\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}/reset-credential"
							},
							"response": []
						},
						{
							"name": "ApiClients - Invalid Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ApiClients NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ApiClients NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"apiclient\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/apiclients/{{CreatedApiClientId}}"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{TOKEN}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function generateClientSecret() {\r",
					"    const minLength = 32;\r",
					"    const maxLength = 128;\r",
					"    let result = '';\r",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';\r",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
					"\r",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');\r",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r",
					"    result += randomChar('0123456789');\r",
					"    result += randomChar(specialCharacters);\r",
					"\r",
					"    for (let i = result.length; i < length; i++) {\r",
					"        const charactersPlusSpecial = characters + specialCharacters;\r",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));\r",
					"    }\r",
					"\r",
					"    return shuffleString(result);\r",
					"}\r",
					"\r",
					"function randomChar(str) {\r",
					"    return str.charAt(Math.floor(Math.random() * str.length));\r",
					"}\r",
					"\r",
					"function shuffleString(str) {\r",
					"    const array = str.split('');\r",
					"    for (let i = array.length - 1; i > 0; i--) {\r",
					"        const j = Math.floor(Math.random() * (i + 1));\r",
					"        [array[i], array[j]] = [array[j], array[i]];\r",
					"    }\r",
					"    return array.join('');\r",
					"}\r",
					"\r",
					"let guid = pm.variables.replaceIn('{{$guid}}');\r",
					"let client_secret =  generateClientSecret();\r",
					"\r",
					"let header = {\r",
					"    'Content-Type': 'application/x-www-form-urlencoded'\r",
					"};\r",
					"\r",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
					"}\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,\r",
					"    method: 'POST',\r",
					"    header: header,\r",
					"    body: {\r",
					"        mode: 'urlencoded',\r",
					"        urlencoded: [\r",
					"            {key: 'ClientId', value: guid },\r",
					"            {key: 'ClientSecret', value: client_secret },\r",
					"            {key: 'DisplayName', value: guid }\r",
					"        ]\r",
					"    }\r",
					"},\r",
					"    (err, res) => {\r",
					"        error = res.json().error\r",
					"        if(error) {\r",
					"            throw res.json().error_description\r",
					"        }\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,\r",
					"    method: 'POST',\r",
					"    header: header,\r",
					"    body: {\r",
					"        mode: 'urlencoded',\r",
					"        urlencoded: [\r",
					"            {key: 'client_id', value: guid },\r",
					"            {key: 'client_secret', value: client_secret },\r",
					"            {key: 'grant_type', value: \"client_credentials\"},\r",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}\r",
					"        ]\r",
					"    }\r",
					"},\r",
					"    (err, res) => {\r",
					"        error = res.json().error\r",
					"        if(error) {\r",
					"            throw res.json().error_description\r",
					"        }\r",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)\r",
					"});\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "ODSInstanceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "ApplicationVendorId",
			"value": "",
			"type": "string"
		},
		{
			"key": "CreatedApplicationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "FirstTwoApiClientIdsCSV",
			"value": "",
			"type": "string"
		},
		{
			"key": "CreatedApiClientId",
			"value": "",
			"type": "string"
		}
	]
}
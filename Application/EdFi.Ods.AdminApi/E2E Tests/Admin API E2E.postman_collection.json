{
	"info": {
		"_postman_id": "eb480eb8-51f4-4454-b376-9b35a5b1ad7a",
		"name": "Admin API E2E refactor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Landing",
			"item": [
				{
					"name": "Landing Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response includes expected properties\", function () {\r",
									"    pm.expect(response).to.have.property(\"version\");\r",
									"    pm.expect(response).to.have.property(\"build\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}",
							"host": [
								"{{API_URL}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"client\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"registered\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"RegisteredClientId\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.collectionVariables.set(\"RegisteredClientSecret\", pm.variables.replaceIn('{{$guid}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "Postman Test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"ClientId\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ClientSecret\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"DisplayName\"].length).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.ClientId.length).to.equal(1);\r",
									"    pm.expect(response.errors.ClientId[0]).to.contain(\"already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "{{UserName}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid Grant Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"grant_type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"scope\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "NOT_REAL/SCOPE",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Incorrect Secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"credentials\");\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"RegisteredClientId\");\r",
									"pm.collectionVariables.unset(\"RegisteredClientSecret\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "v1",
			"item": [
				{
					"name": "Vendors",
					"item": [
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(201);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/vendors/${result.vendorId}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes vendor info\", function () {\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											"\r",
											"if(result.vendorId) {\r",
											"    pm.collectionVariables.set(\"CreatedVendorId\", result.vendorId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Test Company\",\r\n    \"namespacePrefixes\": \"uri://ed-fi.org\",\r\n    \"contactName\": \"Test User\",\r\n    \"contactEmailAddress\": \"test@test-ed-fi.org\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors"
									]
								}
							},
							"response": [
								{
									"name": "Vendor with multiple namespaces",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"company\": {{CompanyName}},\r\n    \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\r\n    \"contactName\": {{ContactName}},\r\n    \"contactEmailAddress\": {{ContactEmail}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_URL}}/vendors",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Thu, 02 Jun 2022 23:13:53 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Location",
											"value": "/Vendors/2"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"result\": {\n        \"vendorId\": 2,\n        \"company\": \"Test Company\",\n        \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\n        \"contactName\": \"Test User\",\n        \"contactEmailAddress\": \"test@test-ed-fi.org\"\n    },\n    \"status\": 201,\n    \"title\": \"Vendor created successfully\"\n}"
								}
							]
						},
						{
							"name": "Vendors - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"\",\r\n    \"namespacePrefixes\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes vendors\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfVendor = results.map(\r",
											"        function(vendor) { return vendor.vendorId; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"\r",
											"    const result = results[indexOfVendor];\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result matches vendor\", function () {\r",
											"    const vendorId = pm.collectionVariables.get(\"CreatedVendorId\");\r",
											"    \r",
											"    pm.expect(result.vendorId).to.equal(vendorId);\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes updated vendor\", function () {\r",
											"    pm.expect(result.company).to.equal(\"Updated Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://academicbenchmarks.com\");\r",
											"    pm.expect(result.contactName).to.equal(\"Updated User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"updated@example.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors -  Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Application",
					"item": [
						{
							"name": "Applications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v1/vendors`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Application Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Application User\",\r",
											"      \"contactEmailAddress\": \"application@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const json = response.json();\r",
											"  if(!json.result.vendorId) { console.log('Error in Pre-request: vendorID missing from response. Response is:', json); }\r",
											"  else {\r",
											"    pm.collectionVariables.set(\"ApplicationVendorId\", json.result.vendorId);\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(201);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/applications/${result.applicationId}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"applicationId\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"if(result.applicationId) {\r",
											"    pm.collectionVariables.set(\"CreatedApplicationId\", result.applicationId);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
											"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ProfileId.length).to.equal(1);\r",
											"    pm.expect(response.errors.ProfileId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": 9999,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.applicationId; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationId).to.equal(255901);\r",
											"    pm.expect(result.profileName).to.equal(null);\r",
											"    pm.expect(result.odsInstanceName).to.equal(null);\r",
											"    pm.expect(result.profiles).to.length(0);\r",
											"    pm.expect(result.vendorId).to.not.equal(null);\r",
											"    pm.expect(result.vendorId).to.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result matches application\", function () {\r",
											"    const applicationId = pm.collectionVariables.get(\"CreatedApplicationId\");\r",
											"    \r",
											"    pm.expect(result.applicationId).to.equal(applicationId);\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationId).to.equal(255901);\r",
											"    pm.expect(result.profileName).to.equal(null);\r",
											"    pm.expect(result.odsInstanceName).to.equal(null);\r",
											"    pm.expect(result.profiles).to.length(0);\r",
											"    pm.expect(result.vendorId).to.not.equal(null);\r",
											"    pm.expect(result.vendorId).to.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response result does not include key or secret\", function () {  \r",
											"    pm.expect(result).to.not.have.property(\"key\");\r",
											"    pm.expect(result).to.not.have.property(\"secret\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications by Vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.applicationId; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationId).to.equal(255901);\r",
											"    pm.expect(result.profileName).to.equal(null);\r",
											"    pm.expect(result.odsInstanceName).to.equal(null);\r",
											"    pm.expect(result.profiles).to.length(0);\r",
											"    pm.expect(result.vendorId).to.not.equal(null);\r",
											"    pm.expect(result.vendorId).to.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response result is filtered by vendor\", function () {\r",
											"    const resultApplicationIds = results.map(\r",
											"        function(application) { return application.applicationId; }\r",
											"    );\r",
											"\r",
											"    pm.expect(resultApplicationIds).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"    pm.expect(resultApplicationIds).to.not.contain(pm.collectionVariables.get(\"OtherApplicationId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v1/vendors`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Other Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Other Application User\",\r",
											"      \"contactEmailAddress\": \"otherapplication@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (vendorErr, vendorResponse) {\r",
											"  if(vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }\r",
											"  const vendorJson = vendorResponse.json();\r",
											"  if(!vendorJson.result.vendorId) { console.log('Error in Pre-request: vendorID missing from response. Response is:', vendorJson); }\r",
											"  pm.collectionVariables.set(\"OtherApplicationVendorId\", vendorJson.result.vendorId);\r",
											"\r",
											"  pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v1/applications`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",\r",
											"        \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw:JSON.stringify({\r",
											"        \"applicationName\": \"Other Vendor Application\",\r",
											"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"        \"claimSetName\": \"Ed-Fi Sandbox\",\r",
											"        \"profileId\": null,\r",
											"        \"educationOrganizationIds\": [ 255901 ]\r",
											"      }),\r",
											"    }\r",
											"  },  \r",
											"  function (appErr, appResonse) {\r",
											"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"    const appJson = appResonse.json();\r",
											"    if(!appJson.result.applicationId) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }\r",
											"    else {\r",
											"      pm.collectionVariables.set(\"OtherApplicationId\", appJson.result.applicationId);\r",
											"    }\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/vendors/{{ApplicationVendorId}}/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"vendors",
										"{{ApplicationVendorId}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes updated application\", function () {\r",
											"    pm.expect(result.applicationName).to.equal(\"Updated Application Name\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi ODS Admin App\");\r",
											"    pm.expect(result.educationOrganizationId).to.equal(1234);\r",
											"    pm.expect(result.profileName).to.equal(null);\r",
											"    pm.expect(result.odsInstanceName).to.equal(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response result does not include application key and secret\", function () {\r",
											"    pm.expect(result).to.not.have.property(\"key\");\r",
											"    pm.expect(result).to.not.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request updated Application/Vendor relationship\", function () {\r",
											"    pm.sendRequest({\r",
											"      url: `${pm.variables.get(\"API_URL\")}/v1/vendors/${pm.collectionVariables.get(\"ApplicationVendorId\")}/applications`,\r",
											"      method: 'GET',\r",
											"      header: {\r",
											"          \"Content-Type\": \"application/json\",\r",
											"          \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"      },\r",
											"      body: {\r",
											"        mode: 'raw',\r",
											"        raw:JSON.stringify({\r",
											"          \"company\": \"Application Company\",\r",
											"          \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"          \"contactName\": \"Application User\",\r",
											"          \"contactEmailAddress\": \"application@example.com\"\r",
											"        }), \r",
											"      }\r",
											"  },  \r",
											"  function (err, response) {\r",
											"    if(err) { console.log(\"Error in test request:\", err); }\r",
											"    if(response.code != 200) { console.log('Error in  test request. Response is:', response); }\r",
											"    const results = response.json().result;\r",
											"    pm.expect(results.length).to.equal(0);\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [1234]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
											"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [1234]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ProfileId.length).to.equal(1);\r",
											"    pm.expect(response.errors.ProfileId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileId\": 9999,\r\n  \"educationOrganizationIds\": [1234]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"applicationId\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}/reset-credential",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}",
										"reset-credential"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Credential - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}/reset-credential",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}",
										"reset-credential"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"ApplicationVendorId\");\r",
											"pm.collectionVariables.unset(\"CreatedApplicationId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ClaimSets",
					"item": [
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"ClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(201);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"claimset\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/claimsets/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes claimSet key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedClaimSetId\", result.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test ClaimSet {{ClaimSetGUID}}\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningObjective\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v1/claimsets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.result.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.result.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Resource Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(3);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"NamespaceBased-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[1]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"learningObjective-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[2]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ClaimSet-WithWrongResource\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards-123\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased-123\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningObjective-123\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wrong-Parent-Child-Relation\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Resource Duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'learningObjective'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Resource-Duplication\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningObjective\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          },\r\n\t\t  {\r\n            \"name\": \"learningObjective\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"const findClaimSetById = function(results, claimSetId) {\r",
											"    let found = null;\r",
											"    results.forEach((claimSet) => {\r",
											"        if (claimSet.id === claimSetId) found = claimSet; \r",
											"    });\r",
											"    return found;\r",
											"}\r",
											"\r",
											"const findClaimSetByName = function(results, claimSetName) {\r",
											"    let found = null;\r",
											"    results.forEach((claimSet) => {\r",
											"        if ((claimSet.name ?? \"\") === claimSetName) found = claimSet; \r",
											"    });\r",
											"    return found;\r",
											"}\r",
											"\r",
											"pm.test(\"Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const result = findClaimSetById(results, pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"    \r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result.isSystemReserved).to.equal(false);\r",
											"    pm.expect(result.applicationsCount).to.equal(0);\r",
											"});\r",
											"\r",
											"// Extract ID for \"AB Connect\"\r",
											"let abConnect = findClaimSetByName(results, \"AB Connect\");\r",
											"console.log(\"SystemReservedClaimSetId\", abConnect);\r",
											"pm.collectionVariables.set(\"SystemReservedClaimSetId\", abConnect.id);\r",
											"\r",
											"// Extract ID for \"Ed-Fi Sandbox\"\r",
											"let sandbox = findClaimSetByName(results, \"Ed-Fi Sandbox\");\r",
											"console.log(\"OtherExistingClaimSetId\", sandbox);\r",
											"pm.collectionVariables.set(\"OtherExistingClaimSetId\", sandbox.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(claimSetId);\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result.isSystemReserved).to.equal(false);\r",
											"    pm.expect(result.applicationsCount).to.equal(0);\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === \"educationStandards\")\r",
											"    pm.expect(educationStandardsResourceClaim).to.be.an(\"object\", \"The educationStandards resource claim was not found.\")\r",
											"    const academicSubjectDescriptorResourceClaim = result.resourceClaims.find(r => r.name === \"academicSubjectDescriptor\")\r",
											"    pm.expect(academicSubjectDescriptorResourceClaim).to.be.an(\"object\", \"The academicSubjectDescriptor resource claim was not found.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json().result;\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"result\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"claimset\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response result includes updated claimset\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Updated Test ClaimSet\");\r",
											"    pm.expect(result.isSystemReserved).to.equal(false);\r",
											"    pm.expect(result.applicationsCount).to.equal(0);\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === \"educationStandards\")\r",
											"    pm.expect(educationStandardsResourceClaim).to.be.an(\"object\", \"The educationStandards resource claim was not found.\")\r",
											"    const academicSubjectDescriptorResourceClaim = result.resourceClaims.any(r => r.name === \"academicSubjectDescriptor\")\r",
											"    pm.expect(academicSubjectDescriptorResourceClaim).to.equal(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Updated Test ClaimSet\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningObjective\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      }      \r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Resource Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(3);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"NamespaceBased-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[1]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"learningObjective-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[2]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"ClaimSet-WithWrongResource\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards-123\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased-123\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningObjective-123\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Wrong-Parent-Child-Relation\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Resource Duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'learningObjective'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Resource-Duplication\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningObjective\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          },\r\n\t\t  {\r\n            \"name\": \"learningObjective\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{SystemReservedClaimSetId}},\r\n    \"name\": \"Update System Reserved ClaimSet\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches success format\", function () {\r",
											"    pm.expect(response.status).to.equal(200);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"claimset\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"SystemReservedClaimSetId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - With Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response.status).to.equal(400);\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"Cannot delete\", \"associated application\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"OtherApplicationId\");\r",
											"pm.collectionVariables.unset(\"OtherApplicationVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{OtherExistingClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{OtherExistingClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Edited-ClaimSet\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response.status).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedClaimSetId\");\r",
											"pm.collectionVariables.unset(\"OtherExistingClaimSetId\");\r",
											"pm.collectionVariables.unset(\"ClaimSetGUID\");\r",
											"pm.collectionVariables.unset(\"OtherClaimSetGUID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.request.auth && pm.request.auth.type === \"noauth\") {",
					"    return;",
					"}",
					"",
					"let currentToken = pm.collectionVariables.get(\"TOKEN\");",
					"if(currentToken) {",
					"    return;",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: pm.variables.get(\"RegisteredClientId\")},",
					"            {key: 'client_secret', value: pm.variables.get(\"RegisteredClientSecret\")},",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token);",
					"        console.log(\"Token success\");",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		}
	]
}